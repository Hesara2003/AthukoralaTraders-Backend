import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { ArrowRight, Star, Package, Users, Award, TrendingUp, ShoppingCart, Eye, Plus, ChevronLeft, ChevronRight } from 'lucide-react';
import { ProductApi } from '../utils/productApi';
import { CustomerProductApi } from '../utils/customerProductApi';
import { useCart } from '../contexts/CartContext';
import PublicLayout from '../components/PublicLayout';

const Homepage = () => {
  const navigate = useNavigate();
  const { addToCart, canAddToCart } = useCart();
  const [featuredProducts, setFeaturedProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [categories, setCategories] = useState([]);
  const [discountData, setDiscountData] = useState(new Map());
  const [currentHeroSlide, setCurrentHeroSlide] = useState(0);
  const [currentBannerSlide, setCurrentBannerSlide] = useState(0);
  const productsScrollRef = useRef(null);
  
  const heroSlides = [
    {
      title: "Your Trusted Hardware Partner",
      subtitle: "Quality Products for Every Project",
      description: "Premium tools, equipment, and materials for construction and industrial needs",
      cta: "Shop Now",
      ctaLink: "/products"
    },
    {
      title: "Professional Grade Tools",
      subtitle: "Built to Last",
      description: "Industry-leading brands with manufacturer warranties and expert support",
      cta: "Explore Tools",
      ctaLink: "/products?category=Tools"
    },
    {
      title: "Fast Delivery Across Sri Lanka",
      subtitle: "Get What You Need, When You Need It",
      description: "Quick and reliable delivery service with real-time tracking",
      cta: "Learn More",
      ctaLink: "/about"
    }
  ];

  const banners = [
    { text: "🎉 Free Delivery on Orders Over Rs. 10,000", color: "bg-blue-600" },
    { text: "⭐ Up to 30% Off on Selected Items This Week", color: "bg-red-600" },
    { text: "🛠️ Expert Advice Available - Call +94 11 234 5678", color: "bg-green-600" },
    { text: "🏆 25+ Years of Excellence in Hardware Solutions", color: "bg-purple-600" }
  ];

  const stats = [
    { icon: Package, value: '1000+', label: 'Products' },
    { icon: Users, value: '5000+', label: 'Happy Customers' },
    { icon: Award, value: '25+', label: 'Years Experience' },
    { icon: TrendingUp, value: '99%', label: 'Satisfaction Rate' },
  ];

  const getDiscountInfo = (product) => {
    const discountInfo = discountData.get(product.name);
    if (discountInfo && discountInfo.discountPercent != null && discountInfo.discountedPrice != null && discountInfo.discountedPrice < product.price) {
      return {
        hasDiscount: true,
        discountedPrice: discountInfo.discountedPrice,
        discountPercent: discountInfo.discountPercent,
        promotionName: discountInfo.promotionName
      };
    }
    return {
      hasDiscount: false,
      discountedPrice: product.price,
      discountPercent: null,
      promotionName: null
    };
  };

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const [adminData, customerData] = await Promise.all([
          ProductApi.list(),
          CustomerProductApi.list().catch(() => [])
        ]);
        
        const discountMap = new Map();
        if (Array.isArray(customerData)) {
          customerData.forEach(item => {
            if (item.name) {
              discountMap.set(item.name, {
                discountedPrice: item.discountedPrice,
                discountPercent: item.discountPercent,
                promotionName: item.promotionName
              });
            }
          });
        }
        setDiscountData(discountMap);
        
        const normalized = (Array.isArray(adminData) ? adminData : []).map((p) => {
          const pid = p?.id ?? p?.productId ?? p?._id ?? p?.sku ?? p?.code ?? null;
          return pid != null ? { ...p, id: pid } : p;
        });
        
        setFeaturedProducts(normalized.slice(0, 12));
        const uniqueCategories = [...new Set(normalized.map(product => product.category).filter(cat => cat))].slice(0, 6);
        setCategories(uniqueCategories);
      } catch (error) {
        console.error('Failed to fetch products:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, []);

  // Auto-scroll hero carousel
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentHeroSlide((prev) => (prev + 1) % heroSlides.length);
    }, 5000);
    return () => clearInterval(interval);
  }, [heroSlides.length]);

  // Auto-scroll banner
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentBannerSlide((prev) => (prev + 1) % banners.length);
    }, 3000);
    return () => clearInterval(interval);
  }, [banners.length]);

  const handleAddToCart = (product) => {
    const discountInfo = getDiscountInfo(product);
    const effectivePrice = discountInfo.hasDiscount ? discountInfo.discountedPrice : product.price;
    const productForCart = { ...product, price: effectivePrice };

    const validation = canAddToCart(productForCart, 1);
    if (validation.canAdd) {
      addToCart(productForCart, 1);
    }
  };

  const scrollProducts = (direction) => {
    if (productsScrollRef.current) {
      const scrollAmount = 300;
      productsScrollRef.current.scrollBy({
        left: direction === 'left' ? -scrollAmount : scrollAmount,
        behavior: 'smooth'
      });
    }
  };

  return (
    <PublicLayout>
      {/* Sliding Banner */}
      <div className="bg-blue-600 text-white overflow-hidden">
        <div className="relative h-10">
          {banners.map((banner, index) => (
            <div
              key={index}
              className={`absolute inset-0 flex items-center justify-center transition-opacity duration-500 ${
                index === currentBannerSlide ? 'opacity-100' : 'opacity-0'
              } ${banner.color}`}
            >
              <p className="text-sm font-medium">{banner.text}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Hero Carousel */}
      <section className="relative bg-blue-900 text-white overflow-hidden">
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-blue-700 via-blue-900 to-gray-900"></div>
        
        <div className="relative container mx-auto px-4">
          {heroSlides.map((slide, index) => (
            <div
              key={index}
              className={`transition-opacity duration-700 ${
                index === currentHeroSlide ? 'opacity-100' : 'opacity-0 absolute inset-0'
              }`}
            >
              <div className="py-20 lg:py-28">
                <div className="max-w-3xl mx-auto text-center">
                  <h1 className="heading text-5xl lg:text-6xl font-bold mb-4 animate-fade-in-up">
                    {slide.title}
                  </h1>
                  <p className="heading text-2xl lg:text-3xl text-blue-200 mb-6 animate-fade-in-up" style={{animationDelay: '0.1s'}}>
                    {slide.subtitle}
                  </p>
                  <p className="text-lg text-blue-100 mb-8 max-w-2xl mx-auto animate-fade-in-up" style={{animationDelay: '0.2s'}}>
                    {slide.description}
                  </p>
                  <Link
                    to={slide.ctaLink}
                    className="inline-flex items-center gap-2 bg-white text-blue-900 px-8 py-4 rounded-lg font-semibold text-lg hover:bg-blue-50 transition-colors shadow-lg animate-fade-in-up"
                    style={{animationDelay: '0.3s'}}
                  >
                    {slide.cta}
                    <ArrowRight className="w-5 h-5" />
                  </Link>
                </div>
              </div>
            </div>
          ))}
          
          {/* Carousel Indicators */}
          <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex gap-2">
            {heroSlides.map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentHeroSlide(index)}
                className={`w-2 h-2 rounded-full transition-all ${
                  index === currentHeroSlide ? 'bg-white w-8' : 'bg-white/50'
                }`}
              />
            ))}
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-12 bg-white border-b">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-8">
            {stats.map((stat, index) => (
              <div key={index} className="text-center animate-fade-in-up" style={{animationDelay: `${index * 0.1}s`}}>
                <div className="inline-flex items-center justify-center w-14 h-14 bg-blue-50 rounded-lg mb-3">
                  <stat.icon className="w-7 h-7 text-blue-600" />
                </div>
                <div className="heading text-3xl font-bold text-gray-900">{stat.value}</div>
                <div className="text-sm text-gray-600 mt-1">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Section Divider */}
      <div className="section-divider bg-gray-50"></div>

      {/* Featured Products Carousel */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="heading text-3xl font-bold text-gray-900 mb-2">Featured Products</h2>
              <p className="text-gray-600">Discover our most popular items</p>
            </div>
            <div className="flex gap-2">
              <button
                onClick={() => scrollProducts('left')}
                className="p-2 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <ChevronLeft className="w-5 h-5" />
              </button>
              <button
                onClick={() => scrollProducts('right')}
                className="p-2 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <ChevronRight className="w-5 h-5" />
              </button>
            </div>
          </div>

          <div 
            ref={productsScrollRef}
            className="flex gap-4 overflow-x-auto scrollbar-hide scroll-smooth pb-4"
            style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}
          >
            {loading ? (
              Array.from({ length: 6 }).map((_, index) => (
                <div key={index} className="flex-shrink-0 w-64 bg-white rounded-lg border border-gray-200 p-4 animate-pulse">
                  <div className="h-48 bg-gray-200 rounded-lg mb-3" />
                  <div className="h-4 bg-gray-200 rounded w-3/4 mb-2" />
                  <div className="h-3 bg-gray-200 rounded w-1/2" />
                </div>
              ))
            ) : (
              featuredProducts.map((product) => {
                const discountInfo = getDiscountInfo(product);
                const price = discountInfo.hasDiscount ? discountInfo.discountedPrice : product.price;
                return (
                  <div key={product.id} className="flex-shrink-0 w-64 bg-white rounded-lg border border-gray-200 hover:border-gray-300 hover:shadow-md transition-all">
                    <div className="p-4">
                      <div className="relative aspect-square bg-gray-50 rounded-lg mb-3 overflow-hidden">
                        {product.images && product.images.length > 0 ? (
                          <img 
                            src={`http://localhost:8080/api/files/products/${product.images[0]}`}
                            alt={product.name}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center">
                            <Package className="w-16 h-16 text-gray-300" />
                          </div>
                        )}
                        {discountInfo.hasDiscount && (
                          <span className="absolute top-2 right-2 bg-red-600 text-white text-xs font-bold px-2 py-1 rounded">
                            -{discountInfo.discountPercent}%
                          </span>
                        )}
                      </div>
                      <h3 className="font-semibold text-gray-900 mb-1 line-clamp-2">{product.name}</h3>
                      <div className="flex items-baseline gap-2 mb-3">
                        <span className="heading text-xl font-bold text-gray-900">Rs. {price?.toFixed(2)}</span>
                        {discountInfo.hasDiscount && (
                          <span className="text-sm text-gray-400 line-through">Rs. {product.price?.toFixed(2)}</span>
                        )}
                      </div>
                      <div className="flex gap-2">
                        <button
                          onClick={() => navigate(`/products/${product.id}`)}
                          className="flex-1 py-2 px-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium"
                        >
                          View
                        </button>
                        <button
                          onClick={() => handleAddToCart(product)}
                          className="flex-1 py-2 px-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-semibold"
                        >
                          Add to Cart
                        </button>
                      </div>
                    </div>
                  </div>
                );
              })
            )}
          </div>
        </div>
      </section>

      {/* Section Divider */}
      <div className="section-divider bg-white"></div>

      {/* Categories */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="heading text-3xl font-bold text-gray-900 mb-3">Shop by Category</h2>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Browse our extensive range of hardware products organized by category
            </p>
          </div>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {categories.map((category, index) => (
              <Link
                key={category}
                to={`/products?category=${encodeURIComponent(category)}`}
                className="group p-6 bg-gray-50 rounded-lg border border-gray-200 hover:border-blue-500 hover:shadow-md transition-all text-center animate-fade-in-up"
                style={{animationDelay: `${index * 0.05}s`}}
              >
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-3 group-hover:bg-blue-600 transition-colors">
                  <Package className="w-6 h-6 text-blue-600 group-hover:text-white transition-colors" />
                </div>
                <h3 className="font-semibold text-gray-900 group-hover:text-blue-600 transition-colors">{category}</h3>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* Section Divider */}
      <div className="section-divider bg-gray-50"></div>

      {/* CTA Section */}
      <section className="py-20 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="bg-blue-600 rounded-xl p-12 text-center text-white">
            <h2 className="heading text-4xl font-bold mb-4">Ready to Start Your Project?</h2>
            <p className="text-xl text-blue-100 mb-8 max-w-2xl mx-auto">
              Explore our full range of products and find everything you need for your next project
            </p>
            <Link
              to="/products"
              className="inline-flex items-center gap-2 bg-white text-blue-600 px-8 py-4 rounded-lg font-semibold text-lg hover:bg-blue-50 transition-colors shadow-lg"
            >
              Browse All Products
              <ArrowRight className="w-5 h-5" />
            </Link>
          </div>
        </div>
      </section>
    </PublicLayout>
  );
};

export default Homepage;
